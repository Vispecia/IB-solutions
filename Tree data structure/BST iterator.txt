/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

vector<int> ans;
int i=0;
int sz;
BSTIterator::BSTIterator(TreeNode *root) {

    stack<TreeNode*> s;
    TreeNode* cur = root;
    
    while(cur || !s.empty())
    {
        while(cur)
        {
            s.push(cur);
            cur =  cur->left;
        }
        
        cur = s.top(); s.pop();
        ans.push_back(cur->val);
        cur = cur->right;
    }
    
    sz = ans.size();
    

}

/** @return whether we have a next smallest number */
bool BSTIterator::hasNext() {
    return i<sz;
}

/** @return the next smallest number */
int BSTIterator::next() {
    return ans[i++];
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
